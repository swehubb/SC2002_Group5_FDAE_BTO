package bto.Entities;

import java.util.ArrayList;
import java.util.List;
import bto.Enums.*;
import bto.EntitiesProjectRelated.*;
import bto.Controllers.ReceiptGenerator;

public class HDBOfficer extends User {
     private List<Project> assignedProjects;
     private List<OfficerRegistration> registrations;
     private Applicant applicantRole; // Composition - HDBOfficer has an Applicant role
     
     // Constructors
     public HDBOfficer() {
         super();
         assignedProjects = new ArrayList<>();
         registrations = new ArrayList<>();
         // Create the applicant role with the same user details
         applicantRole = new Applicant();
     }
     
     public HDBOfficer(String nric, String password, int age, MaritalStatus maritalStatus, String name) {
         super(nric, password, age, maritalStatus, name);
         assignedProjects = new ArrayList<>();
         registrations = new ArrayList<>();
         // Create the applicant role with the same user details
         applicantRole = new Applicant(nric, password, age, maritalStatus, name);
     }
     
     // Original Officer-specific Methods retained
     
     /**
      * Generates a receipt for a booking.
      * Officers cannot generate receipts for their own bookings.
      * 
      * @param booking The flat booking to generate a receipt for
      * @return The receipt as a formatted string, or null if the booking is invalid or belongs to the officer
      */
     public String generateReceiptForBooking(FlatBooking booking) {
         // Check if the booking belongs to the officer
         if (booking == null || booking.getApplicant().getNric().equals(this.getNric())) {
             // Not allowed to generate receipt for their own booking
             return null;
         }
         
         // Mark the booking as processed by this officer
         booking.setProcessedByOfficer(this);
         
         // Use the ReceiptGenerator to generate the receipt
         ReceiptGenerator generator = new ReceiptGenerator();
         String receipt = generator.generateReceipt(booking);
         
         if (receipt != null && !receipt.isEmpty()) {
             // Log the receipt generation
             System.out.println("Receipt generated by Officer " + this.getName() + " for applicant: " + 
                                booking.getApplicant().getName() + " (" + booking.getApplicant().getNric() + ")");
             
             return receipt;
         } else {
             return "Failed to generate receipt. Please check booking details.";
         }
     }
     
     
/**
 * Generates a receipt for a project application.
 * Officers cannot generate receipts for their own applications.
 * 
 * @param application The project application to generate a receipt for
 * @return The receipt as a formatted string, or null if the application is invalid or belongs to the officer
 */
public String generateReceipt(ProjectApplication application) {
    // Check if the application belongs to the officer
    if (application == null || application.getApplicant().getNric().equals(this.getNric())) {
        // Not allowed to generate receipt for their own application
        return null;
    }
    
    // Use the ReceiptGenerator to generate the receipt
    ReceiptGenerator generator = new ReceiptGenerator();
    boolean success = generator.generateReceipt(application);
    
    if (success) {
        // Create a temporary booking object for receipt generation
        FlatBooking tempBooking = new FlatBooking(
            application.getApplicant(),
            application.getProject(),
            application.getSelectedFlatType(),
            0  // No flat ID yet
        );
        
        // Set the officer as the processor
        try {
            tempBooking.setProcessedByOfficer(this);
        } catch (Exception e) {
            // ProcessedByOfficer might not be available in the FlatBooking class
        }
        
        return generator.generateReceipt(tempBooking);
    } else {
        return null;
    }
}

/**
 * Generates a receipt for a flat booking.
 * Officers cannot generate receipts for their own bookings.
 * 
 * @param booking The flat booking to generate a receipt for
 * @return The receipt as a formatted string, or null if the booking is invalid or belongs to the officer
 */
public String generateReceiptForBooking(FlatBooking booking) {
    // Check if the booking belongs to the officer
    if (booking == null || booking.getApplicant().getNric().equals(this.getNric())) {
        // Not allowed to generate receipt for their own booking
        return null;
    }
    
    // Set the officer as the processor
    try {
        booking.setProcessedByOfficer(this);
    } catch (Exception e) {
        // ProcessedByOfficer might not be available in the FlatBooking class
    }
    
    // Use the ReceiptGenerator to generate the receipt
    ReceiptGenerator generator = new ReceiptGenerator();
    return generator.generateReceipt(booking);
}
     
     // Other original methods retained
     
     // Getters and Setters
     public List<Project> getAssignedProjects() {
         return assignedProjects;
     }
    
     public void setAssignedProjects(List<Project> assignedProjects) {
         this.assignedProjects = assignedProjects;
     }
    
     public List<OfficerRegistration> getRegistrations() {
         return registrations;
     }
    
     public void setRegistrations(List<OfficerRegistration> registrations) {
         this.registrations = registrations;
     }
     
     public Applicant getApplicantRole() {
         return applicantRole;
     }
     
     public void setApplicantRole(Applicant applicantRole) {
         this.applicantRole = applicantRole;
     }
     
     // Helper methods
     public void addAssignedProject(Project project) {
         if (!assignedProjects.contains(project)) {
             assignedProjects.add(project);
         }
     }
     
     public void addRegistration(OfficerRegistration registration) {
         if (!registrations.contains(registration)) {
             registrations.add(registration);
         }
     }
}
